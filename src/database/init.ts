// =============================================================================
// STUDYBOT BACKEND - INITIALISATION BASE DE DONN√âES
// =============================================================================

import { database } from '@/config/database';
import { conversationDB } from '@/services/conversationDatabaseService';
import { logger } from '@/utils/logger';

export class DatabaseInitializer {
  /**
   * Initialiser toute la base de donn√©es
   */
  static async initialize(): Promise<boolean> {
    try {
      logger.info('üîß Initialisation de la base de donn√©es...');

      // 1. Tester la connexion
      const connectionTest = await database.testConnection();
      if (!connectionTest) {
        throw new Error('Impossible de se connecter √† MySQL');
      }

      // 2. Initialiser les tables conversations
      await conversationDB.initializeTables();

      // 3. Cr√©er les index de performance si n√©cessaire
      await DatabaseInitializer.createPerformanceIndexes();

      logger.info('‚úÖ Base de donn√©es initialis√©e avec succ√®s');
      return true;

    } catch (error) {
      logger.error('‚ùå Erreur initialisation base de donn√©es:', error);
      return false;
    }
  }

  /**
   * Cr√©er les index de performance
   */
  private static async createPerformanceIndexes(): Promise<void> {
    try {
      // Index pour les recherches par date
      await database.query(`
        CREATE INDEX IF NOT EXISTS idx_conversations_date_range 
        ON conversation_sessions(created_at, last_activity)
      `);

      // Index pour la recherche textuelle dans les messages
      await database.query(`
        CREATE INDEX IF NOT EXISTS idx_messages_content_search 
        ON conversation_messages(content(255))
      `);

      // Index composite pour les feedbacks
      await database.query(`
        CREATE INDEX IF NOT EXISTS idx_feedback_combined 
        ON conversation_feedbacks(session_id, type, timestamp)
      `);

      logger.info('‚úÖ Index de performance cr√©√©s');
    } catch (error) {
      logger.warn('‚ö†Ô∏è Erreur cr√©ation index de performance:', error);
    }
  }

  /**
   * Nettoyer et r√©initialiser la base de donn√©es (DANGER!)
   */
  static async reset(): Promise<boolean> {
    try {
      logger.warn('‚ö†Ô∏è RESET de la base de donn√©es...');

      await database.query('DROP TABLE IF EXISTS conversation_feedbacks');
      await database.query('DROP TABLE IF EXISTS conversation_messages');
      await database.query('DROP TABLE IF EXISTS conversation_sessions');
      await database.query('DROP TABLE IF EXISTS users');

      logger.info('üóëÔ∏è Tables supprim√©es');

      // R√©initialiser
      await DatabaseInitializer.initialize();

      logger.info('‚úÖ Base de donn√©es r√©initialis√©e');
      return true;

    } catch (error) {
      logger.error('‚ùå Erreur reset base de donn√©es:', error);
      return false;
    }
  }

  /**
   * Migrer les donn√©es du service m√©moire vers MySQL (si n√©cessaire)
   */
  static async migrateFromMemory(): Promise<void> {
    try {
      logger.info('üîÑ Migration des donn√©es m√©moire vers MySQL...');
      
      // Cette fonction pourrait √™tre utilis√©e pour migrer des donn√©es existantes
      // du service m√©moire vers MySQL lors du d√©ploiement initial
      
      logger.info('‚úÖ Migration termin√©e');
    } catch (error) {
      logger.error('‚ùå Erreur migration:', error);
    }
  }

  /**
   * V√©rifier l'int√©grit√© de la base de donn√©es
   */
  static async checkIntegrity(): Promise<boolean> {
    try {
      // V√©rifier que toutes les tables existent
      const tables = ['conversation_sessions', 'conversation_messages', 'conversation_feedbacks'];
      
      for (const table of tables) {
        const result = await database.query(`
          SELECT COUNT(*) as count FROM information_schema.tables 
          WHERE table_schema = DATABASE() AND table_name = ?
        `, [table]);

        if (!Array.isArray(result) || result.length === 0 || result[0].count === 0) {
          logger.error(`‚ùå Table manquante: ${table}`);
          return false;
        }
      }

      // V√©rifier les contraintes de cl√©s √©trang√®res
      const foreignKeys = await database.query(`
        SELECT COUNT(*) as count FROM information_schema.key_column_usage 
        WHERE table_schema = DATABASE() 
        AND referenced_table_name IS NOT NULL
      `);

      logger.info(`‚úÖ Int√©grit√© v√©rifi√©e - ${foreignKeys[0]?.count || 0} cl√©s √©trang√®res`);
      return true;

    } catch (error) {
      logger.error('‚ùå Erreur v√©rification int√©grit√©:', error);
      return false;
    }
  }

  /**
   * Obtenir les statistiques de la base de donn√©es
   */
  static async getStats(): Promise<{
    sessions: number;
    messages: number;
    feedbacks: number;
    oldestSession: Date | null;
    newestSession: Date | null;
  }> {
    try {
      const stats = await database.query(`
        SELECT 
          (SELECT COUNT(*) FROM conversation_sessions) as sessions,
          (SELECT COUNT(*) FROM conversation_messages) as messages,
          (SELECT COUNT(*) FROM conversation_feedbacks) as feedbacks,
          (SELECT MIN(created_at) FROM conversation_sessions) as oldest_session,
          (SELECT MAX(created_at) FROM conversation_sessions) as newest_session
      `);

      const result = Array.isArray(stats) && stats.length > 0 ? stats[0] : {};

      return {
        sessions: result.sessions || 0,
        messages: result.messages || 0,
        feedbacks: result.feedbacks || 0,
        oldestSession: result.oldest_session ? new Date(result.oldest_session) : null,
        newestSession: result.newest_session ? new Date(result.newest_session) : null
      };

    } catch (error) {
      logger.error('‚ùå Erreur r√©cup√©ration statistiques:', error);
      return {
        sessions: 0,
        messages: 0,
        feedbacks: 0,
        oldestSession: null,
        newestSession: null
      };
    }
  }
}

export default DatabaseInitializer; 
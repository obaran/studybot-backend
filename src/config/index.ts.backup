// =============================================================================
// STUDYBOT BACKEND - CONFIGURATION
// =============================================================================

import dotenv from 'dotenv';
import { 
  OpenAIConfig, 
  QdrantConfig, 
  DatabaseConfig, 
  ServerConfig 
} from '@/types';

// Charger les variables d'environnement
dotenv.config();

// Validation des variables d'environnement obligatoires
const requiredEnvVars = [
  'NODE_ENV',
  'PORT',
  'JWT_SECRET',
  'AZURE_OPENAI_ENDPOINT',
  'AZURE_OPENAI_API_KEY',
  'QDRANT_URL',
  'QDRANT_API_KEY'
];

const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);
if (missingEnvVars.length > 0) {
  throw new Error(
    `Variables d'environnement manquantes: ${missingEnvVars.join(', ')}`
  );
}

// Configuration du serveur
export const serverConfig: ServerConfig = {
  port: parseInt(process.env.PORT || '3001', 10),
  nodeEnv: process.env.NODE_ENV || 'development',
  corsOrigins: (process.env.ALLOWED_ORIGINS || 'http://localhost:5173').split(','),
  rateLimitWindow: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10),
  rateLimitMaxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100', 10),
  jwtSecret: process.env.JWT_SECRET!,
  jwtExpiresIn: process.env.JWT_EXPIRES_IN || '24h',
  bcryptRounds: parseInt(process.env.BCRYPT_ROUNDS || '12', 10),
};

// Configuration Azure OpenAI
export const openaiConfig: OpenAIConfig = {
  endpoint: process.env.AZURE_OPENAI_ENDPOINT!,
  apiKey: process.env.AZURE_OPENAI_API_KEY!,
  apiVersion: process.env.AZURE_OPENAI_API_VERSION || '2024-02-15-preview',
  deploymentName: process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4',
  model: process.env.AZURE_OPENAI_MODEL || 'gpt-4',
};

// Configuration Qdrant - FORÇAGE DES NOUVELLES VALEURS
export const qdrantConfig: QdrantConfig = {
  url: 'https://dffb1ac4-4599-42d3-802a-15fb23414b46.germanywestcentral-0.azure.cloud.qdrant.io:6333',
  apiKey: 'NjkQfYNtbHywOs_w3ooLJNihbOaaL8orny7VvjkBubPUdllO4lxVXQ',
  collectionName: 'Studybot BBA 11.10.24',
};

// Configuration base de données (sera activée quand la DB sera créée)
export const databaseConfig: DatabaseConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '3306', 10),
  name: process.env.DB_NAME || 'studybot_db',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  ssl: process.env.DB_SSL === 'true',
};

// Vérifier si la base de données est configurée
export const isDatabaseConfigured = (): boolean => {
  return !!(
    process.env.DB_HOST &&
    process.env.DB_USER &&
    process.env.DB_PASSWORD &&
    process.env.DB_NAME
  );
};

// Configuration de logging
export const loggingConfig = {
  level: process.env.LOG_LEVEL || 'info',
  file: process.env.LOG_FILE || 'logs/studybot.log',
};

// URLs frontend
export const frontendConfig = {
  url: process.env.FRONTEND_URL || 'http://localhost:5173',
  adminDashboardUrl: process.env.ADMIN_DASHBOARD_URL || 'http://localhost:3000',
};

// Configuration Azure (pour le déploiement)
export const azureConfig = {
  appServiceName: process.env.AZURE_APP_SERVICE_NAME,
  resourceGroup: process.env.AZURE_RESOURCE_GROUP,
  location: process.env.AZURE_LOCATION || 'francecentral',
  applicationInsightsKey: process.env.AZURE_APPLICATION_INSIGHTS_KEY,
};

// Export de toutes les configurations
export const config = {
  server: serverConfig,
  openai: openaiConfig,
  qdrant: qdrantConfig,
  database: databaseConfig,
  logging: loggingConfig,
  frontend: frontendConfig,
  azure: azureConfig,
  isDatabaseConfigured: isDatabaseConfigured(),
} as const;

export default config; 